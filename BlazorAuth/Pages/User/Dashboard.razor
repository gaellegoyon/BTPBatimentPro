@page "/user/dashboard"
@inject ProjectService ProjectService
@inject EmployeeService EmployeeService
@inject AuthenticationService AuthService

<div class="container-fluid p-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="fw-bold text-primary mb-1">Tableau de Bord</h1>
            <p class="text-muted">Vue d'ensemble de vos chantiers</p>
        </div>
        <div class="bg-light rounded-3 px-3 py-2">
            <i class="bi bi-calendar3 me-2"></i>
            <span class="text-muted">@DateTime.Now.ToString("dd MMMM yyyy")</span>
        </div>
    </div>

    <div class="row g-4">
        @if (userProjects != null && userProjects.Any())
        {
            @foreach (var project in userProjects)
            {
                <div class="col-12 col-md-6 col-xl-4">
                    <div class="card border-0 shadow-sm h-100">
                        <div class="card-body p-4">
                            <div class="d-flex align-items-center gap-3 mb-3">
                                <div class="avatar bg-primary-subtle rounded-circle p-2">
                                    <i class="bi bi-building text-primary"></i>
                                </div>
                                <div>
                                    <h5 class="card-title mb-0">@project.Name</h5>
                                    <small class="text-muted">Chantier #@project.Id</small>
                                </div>
                            </div>

                            <p class="card-text text-muted mb-4">@project.Description</p>

                            <div class="border-top pt-3">
                                <h6 class="mb-3">
                                    <i class="bi bi-people-fill me-2 text-primary"></i>
                                    Équipe
                                </h6>
                                @if (projectMembers.ContainsKey(project.Id) && projectMembers[project.Id].Any())
                                {
                                    <div class="d-flex flex-wrap gap-2">
                                        @foreach (var member in projectMembers[project.Id])
                                        {
                                            <span class="badge bg-light text-dark">
                                                <i class="bi bi-person-circle me-1"></i>
                                                @member.FirstName @member.LastName
                                            </span>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <p class="text-muted mb-0">
                                        <i class="bi bi-exclamation-circle me-2"></i>
                                        Aucun membre assigné
                                    </p>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-body p-5 text-center">
                        <div class="display-6 text-muted mb-3">
                            <i class="bi bi-building-x"></i>
                        </div>
                        <h5 class="fw-normal text-muted">Aucun chantier assigné</h5>
                        <p class="text-muted">Vous n'avez pas encore été assigné à un chantier.</p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .avatar {
        width: 48px;
        height: 48px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .badge {
        font-weight: normal;
    }
</style>

@code {
    private List<Project> userProjects = new List<Project>();
    private Dictionary<int, List<Employee>> projectMembers = new Dictionary<int, List<Employee>>();
    private String employeeId;

    protected override async Task OnInitializedAsync()
    {
        employeeId = await AuthService.GetEmployeeId();
        if (employeeId != null && int.TryParse(employeeId, out int userIdInt))
        {
            userProjects = await ProjectService.GetProjectsByEmployeeAsync(userIdInt);
            foreach (var project in userProjects)
            {
                projectMembers[project.Id] = await ProjectService.GetEmployeesByProjectAsync(project.Id);
            }
        }
    }
}