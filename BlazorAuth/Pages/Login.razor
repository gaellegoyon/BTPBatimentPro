@page "/login"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@inject AuthenticationService AuthService
@using BlazorAuth.Models

<div class="min-vh-100 d-flex align-items-center justify-content-center background-gradient py-5">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-5">
                <div class="card shadow-lg border-0 rounded-lg">
                    <div class="card-body p-5">
                        <div class="text-center mb-4">
                            <h2 class="fw-bold text-primary">Connexion</h2>
                            <p class="text-muted">Accédez à votre espace professionnel</p>
                        </div>

                        <form @onsubmit="@(async () => await LaunchLogin())" @onsubmit:preventDefault>
                            <div class="form-floating mb-3">
                                <input type="text" class="form-control" id="username" placeholder="Nom d'utilisateur"
                                    @bind="loginModel.Username" />
                                <label for="username">Nom d'utilisateur</label>
                            </div>
                            <div class="form-floating mb-4">
                                <input type="password" class="form-control" id="password" placeholder="Mot de passe"
                                    @bind="loginModel.Password" />
                                <label for="password">Mot de passe</label>
                            </div>

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                    @errorMessage
                                    <button type="button" class="btn-close"
                                        @onclick="@(() => errorMessage = null)"></button>
                                </div>
                            }

                            <div class="d-grid mb-3">
                                <button type="submit" class="btn btn-primary btn-lg">
                                    <i class="bi bi-box-arrow-in-right me-2"></i>
                                    Se connecter
                                </button>
                            </div>

                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .background-gradient {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    }

    .card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
    }

    .form-control:focus {
        border-color: #0d6efd;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }

    .btn-primary {
        background: linear-gradient(45deg, #007bff, #0056b3);
        border: none;
        transition: all 0.3s ease;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0, 123, 255, 0.4);
    }
</style>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;

    private async Task LaunchLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("auth/login", loginModel);
            Console.WriteLine(response);
            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadFromJsonAsync<JwtToken>();
                if (token != null)
                {
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "jwt", token.Token);
                    var roles = await AuthService.GetUserRoles();
                    if (roles.Contains("Admin"))
                    {
                        NavManager.NavigateTo("/admin/dashboard", forceLoad: true);
                    }
                    else if (roles.Contains("User"))
                    {
                        NavManager.NavigateTo("/user/dashboard", forceLoad: true);
                    }
                }
            }
            else
            {
                errorMessage = "Échec de la connexion. Veuillez vérifier vos identifiants.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

}
