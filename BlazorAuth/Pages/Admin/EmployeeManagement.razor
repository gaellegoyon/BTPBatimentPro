@page "/admin/employees"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@inject EmployeeService EmployeeService
@inject ILogger<EmployeeManagement> Logger

<div class="container-fluid p-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="fw-bold text-primary mb-1">Gestion des Salariés</h1>
            <p class="text-muted">Gérez votre équipe efficacement</p>
        </div>
        <button class="btn btn-primary d-flex align-items-center gap-2" @onclick="() => showForm = !showForm">
            <i class="bi bi-person-plus-fill"></i>
            <span>@(showForm ? "Fermer" : "Nouveau Salarié")</span>
        </button>
    </div>

    @if (showForm)
    {
        <div class="card border-0 shadow-sm mb-4">
            <div class="card-body p-4">
                <EditForm Model="@newEmployee" OnValidSubmit="AddEmployee" FormName="employeeForm" class="row g-3">
                    <DataAnnotationsValidator />

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            @errorMessage
                            <button type="button" class="btn-close" @onclick="@(() => errorMessage = null)"></button>
                        </div>
                    }

                    <div class="col-md-4">
                        <div class="form-floating">
                            <InputText id="firstName" class="form-control" @bind-Value="newEmployee.FirstName"
                                placeholder="Prénom" />
                            <label for="firstName">Prénom</label>
                            <ValidationMessage For="@(() => newEmployee.FirstName)" class="text-danger" />
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-floating">
                            <InputText id="lastName" class="form-control" @bind-Value="newEmployee.LastName"
                                placeholder="Nom" />
                            <label for="lastName">Nom</label>
                            <ValidationMessage For="@(() => newEmployee.LastName)" class="text-danger" />
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-floating">
                            <InputText id="role" class="form-control" @bind-Value="newEmployee.Role" placeholder="Rôle" />
                            <label for="role">Rôle</label>
                            <ValidationMessage For="@(() => newEmployee.Role)" class="text-danger" />
                        </div>
                    </div>

                    <div class="col-12 d-flex gap-2">
                        <button type="submit" class="btn btn-primary px-4 d-inline-flex align-items-center gap-2">
                            <i class="bi bi-check-lg"></i>
                            Enregistrer
                        </button>
                        <button type="button" class="btn btn-outline-secondary px-4" @onclick="ResetForm">
                            Annuler
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    }

    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="bg-light">
                        <tr>
                            <th class="border-0 px-4 py-3">Salarié</th>
                            <th class="border-0 px-4 py-3">Rôle</th>
                            <th class="border-0 px-4 py-3">Status</th>
                            <th class="border-0 px-4 py-3 text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var employee in employees)
                        {
                            <tr>
                                <td class="px-4 py-3">
                                    <div class="d-flex align-items-center gap-3">
                                        <div class="avatar bg-primary-subtle rounded-circle p-2">
                                            <i class="bi bi-person text-primary"></i>
                                        </div>
                                        <div>
                                            <h6 class="mb-0">@employee.FirstName @employee.LastName</h6>
                                            <small class="text-muted">ID: @employee.Id</small>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-4 py-3">
                                    <span class="badge bg-primary-subtle text-primary">@employee.Role</span>
                                </td>
                                <td class="px-4 py-3">
                                    <span class="badge bg-success-subtle text-success">Actif</span>
                                </td>
                                <td class="px-4 py-3 text-end">
                                    <div class="d-flex gap-2 justify-content-end">
                                        <button class="btn btn-light btn-sm" @onclick="() => EditEmployee(employee)">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteEmployee(employee.Id)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Employee> employees = new();
    private Employee newEmployee = new();
    private bool showForm;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        employees = await EmployeeService.GetEmployeesAsync();
    }

    private async Task AddEmployee()
    {
        try
        {
            await EmployeeService.AddEmployeeAsync(newEmployee);
            employees = await EmployeeService.GetEmployeesAsync();
            ResetForm();
            showForm = false;
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Erreur lors de l'ajout : {ex.Message}";
            Logger.LogError(errorMessage);
        }
    }

    private async Task DeleteEmployee(int id)
    {
        try
        {
            await EmployeeService.DeleteEmployeeAsync(id);
            employees.RemoveAll(e => e.Id == id);
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors de la suppression : {ex.Message}";
            Logger.LogError(errorMessage);
        }
    }

    private void EditEmployee(Employee employee)
    {
        newEmployee = new Employee
            {
                Id = employee.Id,
                FirstName = employee.FirstName,
                LastName = employee.LastName,
                Role = employee.Role
            };
        showForm = true;
    }

    private void ResetForm()
    {
        newEmployee = new();
        errorMessage = null;
    }
}
