@page "/admin/projects"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
@inject ProjectService ProjectService
@inject EmployeeService EmployeeService
@inject DistanceService DistanceService
@inject ILogger<ProjectManagement> Logger

<div class="container-fluid p-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="fw-bold text-primary mb-1">Gestion des Chantiers</h1>
            <p class="text-muted">Gérez vos projets et leurs équipes</p>
        </div>
        <button class="btn btn-primary d-flex align-items-center gap-2" @onclick="() => showForm = !showForm">
            <i class="bi bi-building-add"></i>
            <span>@(showForm ? "Fermer" : "Nouveau Chantier")</span>
        </button>
    </div>

    @if (showForm)
    {
        <div class="card border-0 shadow-sm mb-4">
            <div class="card-body p-4">
                <EditForm Model="@newProject" OnValidSubmit="AddProject" FormName="projectForm" class="row g-3">
                    <DataAnnotationsValidator />

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            @errorMessage
                            <button type="button" class="btn-close" @onclick="@(() => errorMessage = null)"></button>
                        </div>
                    }

                    <div class="col-md-12">
                        <div class="form-floating">
                            <InputText id="projectName" class="form-control" @bind-Value="newProject.Name"
                                placeholder="Nom" />
                            <label for="projectName">Nom du chantier</label>
                            <ValidationMessage For="@(() => newProject.Name)" class="text-danger" />
                        </div>
                    </div>

                    <div class="col-md-12">
                        <div class="form-floating">
                            <InputTextArea id="description" class="form-control" style="height: 100px"
                                @bind-Value="newProject.Description" placeholder="Description" />
                            <label for="description">Description</label>
                            <ValidationMessage For="@(() => newProject.Description)" class="text-danger" />
                        </div>
                    </div>

                    <div class="col-md-12">
                        <div class="form-floating">
                            <InputTextArea id="address" class="form-control" @bind-Value="newProject.Address"
                                placeholder="Adresse" />
                            <label for="address">Adresse du chantier</label>
                            <ValidationMessage For="@(() => newProject.Address)" class="text-danger" />
                        </div>
                    </div>

                    <div class="col-12 d-flex gap-2">
                        <button type="submit" class="btn btn-primary px-4 d-inline-flex align-items-center gap-2">
                            <i class="bi bi-check-lg"></i>
                            Enregistrer
                        </button>
                        <button type="button" class="btn btn-outline-secondary px-4" @onclick="ResetForm">
                            Annuler
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    }

    <div class="card border-0 shadow-sm">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover align-middle mb-0">
                    <thead class="bg-light">
                        <tr>
                            <th class="border-0 px-4 py-3">Chantier</th>
                            <th class="border-0 px-4 py-3">Description</th>
                            <th class="border-0 px-4 py-3">Adresse</th>
                            <th class="border-0 px-4 py-3">Distance (km)</th>
                            <th class="border-0 px-4 py-3">Équipe</th>
                            <th class="border-0 px-4 py-3 text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var project in projects)
                        {
                            <tr>
                                <td class="px-4 py-3">
                                    <div class="d-flex align-items-center gap-3">
                                        <div class="avatar bg-primary-subtle rounded-circle p-2">
                                            <i class="bi bi-building text-primary"></i>
                                        </div>
                                        <div>
                                            <h6 class="mb-0">@project.Name</h6>
                                            <small class="text-muted">ID: @project.Id</small>
                                        </div>
                                    </div>
                                </td>
                                <td class="px-4 py-3">@project.Description</td>
                                <td class="px-4 py-3">
                                    <div class="d-flex align-items-center gap-2">
                                        <i class="bi bi-geo-alt text-primary"></i>
                                        @project.Address
                                    </div>
                                </td>
                                <td class="px-4 py-3">
                                    <span>@distances[project.Id]</span>
                                </td>
                                <td class="px-4 py-3">
                                    <button class="btn btn-primary btn-sm" @onclick="() => ViewEmployees(project.Id)">
                                        <i class="bi bi-people-fill me-1"></i>
                                        Voir l'équipe
                                    </button>
                                </td>
                                <td class="px-4 py-3 text-end">
                                    <div class="d-flex gap-2 justify-content-end">
                                        <button class="btn btn-light btn-sm" @onclick="() => EditProject(project)">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-danger btn-sm"
                                            @onclick="() => ShowDeleteConfirmation(project)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Modal pour afficher l'équipe du chantier -->
    <div class="modal fade @((showModal) ? "show d-block" : "")" tabindex="-1" role="dialog"
        aria-labelledby="teamModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="teamModalLabel">
                        <i class="bi bi-people-fill me-2 text-primary"></i>
                        Équipe du chantier
                    </h5>
                </div>
                <div class="modal-body p-4">
                    @if (employees != null && employees.Any())
                    {
                        <div class="row g-3">
                            @foreach (var employee in employees)
                            {
                                <div class="col-md-6">
                                    <div class="card border-0 bg-light">
                                        <div class="card-body p-3">
                                            <div class="d-flex align-items-center gap-3">
                                                <div class="avatar bg-white rounded-circle p-2">
                                                    <i class="bi bi-person text-primary"></i>
                                                </div>
                                                <div>
                                                    <h6 class="mb-1">@employee.FirstName @employee.LastName</h6>
                                                    <span class="badge bg-primary-subtle text-primary">@employee.Role</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-people display-1 text-muted mb-3"></i>
                            <p class="mb-0">Aucun salarié n'est affecté à ce chantier</p>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="CloseModal">Fermer</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal pour confirmer la suppression -->
    <div class="modal fade @((showDeleteDialog) ? "show d-block" : "")" tabindex="-1" role="dialog"
        aria-labelledby="deleteModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteModalLabel">Confirmer la suppression</h5>
                    <button type="button" class="btn-close" @onclick="() => showDeleteDialog = false"
                        aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Êtes-vous sûr de vouloir supprimer le chantier "@(projectToDelete?.Name)" ?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary"
                        @onclick="() => showDeleteDialog = false">Annuler</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Supprimer</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Project> projects = new();
    private Project newProject = new();
    private List<Employee> employees = new();
    private Dictionary<int, double> distances = new();
    private bool showModal;
    private bool showForm;
    private bool showDeleteDialog;
    private Project? projectToDelete;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        projects = await ProjectService.GetProjectsAsync();
        await LoadDistances();
    }

    private async Task LoadDistances()
    {
        foreach (var project in projects)
        {
            try
            {
                var distance = await DistanceService.GetDistanceAsync(project.Address);
                distances[project.Id] = distance;
            }
            catch (Exception ex)
            {
                Logger.LogError($"Erreur lors du chargement de la distance pour le projet {project.Id} : {ex.Message}");
                distances[project.Id] = 0;
            }
        }
    }

    private async Task AddProject()
    {
        try
        {
            await ProjectService.AddProjectAsync(newProject);
            projects = await ProjectService.GetProjectsAsync();
            await LoadDistances();
            ResetForm();
            showForm = false;
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Erreur lors de l'ajout : {ex.Message}";
            Logger.LogError(errorMessage);
        }
    }

    private void ShowDeleteConfirmation(Project project)
    {
        projectToDelete = project;
        showDeleteDialog = true;
    }

    private async Task ConfirmDelete()
    {
        if (projectToDelete != null)
        {
            try
            {
                await DeleteProject(projectToDelete.Id);
                showDeleteDialog = false;
            }
            catch (Exception ex)
            {
                errorMessage = $"Erreur lors de la suppression : {ex.Message}";
                Logger.LogError(errorMessage);
            }
        }
    }

    private async Task DeleteProject(int id)
    {
        try
        {
            await ProjectService.DeleteProjectAsync(id);
            projects.RemoveAll(p => p.Id == id);
            distances.Remove(id);
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur : {ex.Message}";
            Logger.LogError(errorMessage);
        }
    }

    private async Task ViewEmployees(int projectId)
    {
        employees = await ProjectService.GetEmployeesByProjectAsync(projectId);
        showModal = true;
    }

    private void EditProject(Project project)
    {
        newProject = new Project
            {
                Id = project.Id,
                Name = project.Name,
                Description = project.Description,
                Address = project.Address
            };
        showForm = true;
    }

    private void CloseModal()
    {
        showModal = false;
        StateHasChanged();
    }

    private void ResetForm()
    {
        newProject = new Project();
        errorMessage = null;
    }
}