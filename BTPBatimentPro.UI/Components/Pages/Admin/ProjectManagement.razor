@page "/admin/projects"
@inject ProjectService ProjectService
@inject EmployeeService EmployeeService
@inject ILogger<ProjectManagement> Logger
@rendermode InteractiveServer

<div class="modal" tabindex="-1" style="@(showModal ? "display:block;" : "display:none;")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Salariés affectés</h5>
                <button type="button" class="btn-close" @onclick="CloseModal"></button>
            </div>
            <div class="modal-body">
                <table class="table table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Nom</th>
                            <th>Prénom</th>
                            <th>Rôle</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (employees != null && employees.Any())
                        {
                            @foreach (var employee in employees)
                            {
                                <tr>
                                    <td>@employee.LastName</td>
                                    <td>@employee.FirstName</td>
                                    <td>@employee.Role</td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="3" class="text-center">Aucun salarié affecté</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Fermer</button>
            </div>
        </div>
    </div>
</div>


<div class="container mt-5">
    <div class="row">
        <div class="col-lg-6 mb-4">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h3>Ajouter un chantier</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@newProject" OnValidSubmit="AddProject" FormName="projectForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="projectName" class="form-label">Nom du chantier</label>
                            <InputText id="projectName" class="form-control" @bind-Value="newProject.Name" />
                            <ValidationMessage For="@(() => newProject.Name)" />
                        </div>
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <InputTextArea id="description" class="form-control" @bind-Value="newProject.Description" />
                            <ValidationMessage For="@(() => newProject.Description)" />
                        </div>
                        <div class="mb-3">
                            <label for="address" class="form-label">Address</label>
                            <InputTextArea id="address" class="form-control" @bind-Value="newProject.Address" />
                            <ValidationMessage For="@(() => newProject.Address)" />
                        </div>
                        <button type="submit" class="btn btn-success">
                            <i class="fas fa-plus"></i> Ajouter
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
        <div class="col-lg-12">
            <div class="card shadow-sm">
                <div class="card-header bg-secondary text-white">
                    <h3>Liste des chantiers</h3>
                </div>
                <div class="card-body">
                    <table class="table table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Nom</th>
                                <th>Description</th>
                                <th>Adresse</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var project in projects)
                            {
                                <tr>
                                    <td>@project.Name</td>
                                    <td>@project.Description</td>
                                    <td>@project.Address</td>
                                    <td>
                                        <button class="btn btn-danger" @onclick="() => DeleteProject(project.Id)">
                                            <i class="fas fa-trash-alt"></i> Supprimer
                                        </button>
                                        <button class="btn btn-info" @onclick="() => ViewEmployees(project.Id)">
                                            <i class="fas fa-users"></i> Voir les salariés
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Project> projects = new();
    private Project newProject = new();

    private List<Employee> employees = new List<Employee>();
    private bool showModal = false;

    protected override async Task OnInitializedAsync()
    {
        projects = await ProjectService.GetProjectsAsync();
    }

    private async Task AddProject()
    {
        try
        {
            await ProjectService.AddProjectAsync(newProject);
            projects = await ProjectService.GetProjectsAsync();
            newProject = new();
        }
        catch (HttpRequestException ex)
        {
            Logger.LogError($"Erreur lors de l'ajout : {ex.Message}");
        }
    }

    private async Task DeleteProject(int id)
    {
        try
        {
            await ProjectService.DeleteProjectAsync(id);
            var projectToRemove = projects.FirstOrDefault(p => p.Id == id);
            if (projectToRemove != null)
            {
                projects.Remove(projectToRemove);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Erreur : {ex.Message}");
        }
    }

    private async Task ViewEmployees(int projectId)
    {
        employees = await ProjectService.GetEmployeesByProjectAsync(projectId);
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }
}