@page "/admin/employees"
@inject EmployeeService EmployeeService
@inject ILogger<EmployeeManagement> Logger
@rendermode InteractiveServer

<div class="container mt-5">
    <div class="row">
        <div class="col-lg-6 mb-4">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h3>Ajouter un salarié</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@newEmployee" OnValidSubmit="AddEmployee" FormName="employeeForm">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="firstName" class="form-label">Prénom</label>
                            <InputText id="firstName" class="form-control" @bind-Value="newEmployee.FirstName" />
                            <ValidationMessage For="@(() => newEmployee.FirstName)" />
                        </div>
                        <div class="mb-3">
                            <label for="lastName" class="form-label">Nom</label>
                            <InputText id="lastName" class="form-control" @bind-Value="newEmployee.LastName" />
                            <ValidationMessage For="@(() => newEmployee.LastName)" />
                        </div>
                        <div class="mb-3">
                            <label for="role" class="form-label">Rôle</label>
                            <InputText id="role" class="form-control" @bind-Value="newEmployee.Role" />
                            <ValidationMessage For="@(() => newEmployee.Role)" />
                        </div>
                        <button type="submit" class="btn btn-success">
                            <i class="fas fa-plus"></i> Ajouter
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
        <div class="col-lg-12">
            <div class="card shadow-sm">
                <div class="card-header bg-secondary text-white">
                    <h3>Liste des salariés</h3>
                </div>
                <div class="card-body">
                    <table class="table table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Nom</th>
                                <th>Prénom</th>
                                <th>Rôle</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var employee in employees)
                            {
                                <tr>
                                    <td>@employee.LastName</td>
                                    <td>@employee.FirstName</td>
                                    <td>@employee.Role</td>
                                    <td>
                                        <button class="btn btn-danger" @onclick="() => DeleteEmployee(employee.Id)">
                                            <i class="fas fa-trash-alt"></i> Supprimer
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Employee> employees = new();
    private Employee newEmployee = new();

    protected override async Task OnInitializedAsync()
    {
        employees = await EmployeeService.GetEmployeesAsync();
    }

    private async Task AddEmployee()
    {
        try
        {
            Console.WriteLine($"Données soumises : {newEmployee.FirstName}, {newEmployee.LastName}, {newEmployee.Role}");
            await EmployeeService.AddEmployeeAsync(newEmployee);
            employees = await EmployeeService.GetEmployeesAsync();
            newEmployee = new();
        }
        catch (HttpRequestException ex)
        {
            Logger.LogError($"Erreur lors de l'ajout : {ex.Message}");
        }
    }

    private async Task DeleteEmployee(int id)
    {
        try
        {
            await EmployeeService.DeleteEmployeeAsync(id);
            var employeeToRemove = employees.FirstOrDefault(e => e.Id == id);
            if (employeeToRemove != null)
            {
                employees.Remove(employeeToRemove);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Erreur : {ex.Message}");
        }
    }
}